{"ast":null,"code":"\"use strict\";\n\nimport * as React from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { initialWindowMetrics, SafeAreaInsetsContext, SafeAreaProvider } from 'react-native-safe-area-context';\nimport { FrameSizeProvider } from \"./useFrameSize.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar _Dimensions$get = Dimensions.get('window'),\n  _Dimensions$get$width = _Dimensions$get.width,\n  width = _Dimensions$get$width === void 0 ? 0 : _Dimensions$get$width,\n  _Dimensions$get$heigh = _Dimensions$get.height,\n  height = _Dimensions$get$heigh === void 0 ? 0 : _Dimensions$get$heigh;\nvar initialMetrics = Platform.OS === 'web' || initialWindowMetrics == null ? {\n  frame: {\n    x: 0,\n    y: 0,\n    width: width,\n    height: height\n  },\n  insets: {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  }\n} : initialWindowMetrics;\nexport function SafeAreaProviderCompat(_ref) {\n  var children = _ref.children,\n    style = _ref.style;\n  var insets = React.useContext(SafeAreaInsetsContext);\n  children = _jsx(FrameSizeProvider, {\n    initialFrame: initialMetrics.frame,\n    children: children\n  });\n  if (insets) {\n    return _jsx(View, {\n      style: [styles.container, style],\n      children: children\n    });\n  }\n  return _jsx(SafeAreaProvider, {\n    initialMetrics: initialMetrics,\n    style: style,\n    children: children\n  });\n}\nSafeAreaProviderCompat.initialMetrics = initialMetrics;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["React","Dimensions","Platform","StyleSheet","View","initialWindowMetrics","SafeAreaInsetsContext","SafeAreaProvider","FrameSizeProvider","jsx","_jsx","_Dimensions$get","get","_Dimensions$get$width","width","_Dimensions$get$heigh","height","initialMetrics","OS","frame","x","y","insets","top","left","right","bottom","SafeAreaProviderCompat","_ref","children","style","useContext","initialFrame","styles","container","create","flex"],"sources":["/workspaces/ai-english-tutor-v2/node_modules/@react-navigation/bottom-tabs/node_modules/@react-navigation/elements/src/SafeAreaProviderCompat.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Dimensions,\n  Platform,\n  type StyleProp,\n  StyleSheet,\n  View,\n  type ViewStyle,\n} from 'react-native';\nimport {\n  initialWindowMetrics,\n  SafeAreaInsetsContext,\n  SafeAreaProvider,\n} from 'react-native-safe-area-context';\n\nimport { FrameSizeProvider } from './useFrameSize';\n\ntype Props = {\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\nconst { width = 0, height = 0 } = Dimensions.get('window');\n\n// To support SSR on web, we need to have empty insets for initial values\n// Otherwise there can be mismatch between SSR and client output\n// We also need to specify empty values to support tests environments\nconst initialMetrics =\n  Platform.OS === 'web' || initialWindowMetrics == null\n    ? {\n        frame: { x: 0, y: 0, width, height },\n        insets: { top: 0, left: 0, right: 0, bottom: 0 },\n      }\n    : initialWindowMetrics;\n\nexport function SafeAreaProviderCompat({ children, style }: Props) {\n  const insets = React.useContext(SafeAreaInsetsContext);\n\n  children = (\n    <FrameSizeProvider initialFrame={initialMetrics.frame}>\n      {children}\n    </FrameSizeProvider>\n  );\n\n  if (insets) {\n    // If we already have insets, don't wrap the stack in another safe area provider\n    // This avoids an issue with updates at the cost of potentially incorrect values\n    // https://github.com/react-navigation/react-navigation/issues/174\n    return <View style={[styles.container, style]}>{children}</View>;\n  }\n\n  return (\n    <SafeAreaProvider initialMetrics={initialMetrics} style={style}>\n      {children}\n    </SafeAreaProvider>\n  );\n}\n\nSafeAreaProviderCompat.initialMetrics = initialMetrics;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n"],"mappings":";;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAAA,OAAAC,UAAA;AAAA,OAAAC,QAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,IAAA;AAS9B,SACEC,oBAAoB,EACpBC,qBAAqB,EACrBC,gBAAgB,QACX,gCAAgC;AAEvC,SAASC,iBAAiB;AAAyB,SAAAC,GAAA,IAAAC,IAAA;AAOnD,IAAAC,eAAA,GAAkCV,UAAU,CAACW,GAAG,CAAC,QAAQ,CAAC;EAAAC,qBAAA,GAAAF,eAAA,CAAlDG,KAAK;EAALA,KAAK,GAAAD,qBAAA,cAAG,CAAC,GAAAA,qBAAA;EAAAE,qBAAA,GAAAJ,eAAA,CAAEK,MAAM;EAANA,MAAM,GAAAD,qBAAA,cAAG,IAAAA,qBAAA;AAK5B,IAAME,cAAc,GAClBf,QAAQ,CAACgB,EAAE,KAAK,KAAK,IAAIb,oBAAoB,IAAI,IAAI,GACjD;EACEc,KAAK,EAAE;IAAEC,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE,CAAC;IAAEP,KAAK,EAALA,KAAK;IAAEE,MAAA,EAAAA;EAAO,CAAC;EACpCM,MAAM,EAAE;IAAEC,GAAG,EAAE,CAAC;IAAEC,IAAI,EAAE,CAAC;IAAEC,KAAK,EAAE,CAAC;IAAEC,MAAM,EAAE;EAAE;AACjD,CAAC,GACDrB,oBAAoB;AAE1B,OAAO,SAASsB,sBAAsBA,CAAAC,IAAA,EAA6B;EAAA,IAA1BC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;IAAEC,KAAA,GAAAF,IAAA,CAAAE,KAAA;EACjD,IAAMR,MAAM,GAAGtB,KAAK,CAAC+B,UAAU,CAACzB,qBAAqB,CAAC;EAEtDuB,QAAQ,GACNnB,IAAA,CAACF,iBAAiB;IAACwB,YAAY,EAAEf,cAAc,CAACE,KAAM;IAAAU,QAAA,EACnDA;EAAQ,CACQ,CACpB;EAED,IAAIP,MAAM,EAAE;IAIV,OAAOZ,IAAA,CAACN,IAAI;MAAC0B,KAAK,EAAE,CAACG,MAAM,CAACC,SAAS,EAAEJ,KAAK,CAAE;MAAAD,QAAA,EAAEA;IAAQ,CAAO,CAAC;EAClE;EAEA,OACEnB,IAAA,CAACH,gBAAgB;IAACU,cAAc,EAAEA,cAAe;IAACa,KAAK,EAAEA,KAAM;IAAAD,QAAA,EAC5DA;EAAQ,CACO,CAAC;AAEvB;AAEAF,sBAAsB,CAACV,cAAc,GAAGA,cAAc;AAEtD,IAAMgB,MAAM,GAAG9B,UAAU,CAACgC,MAAM,CAAC;EAC/BD,SAAS,EAAE;IACTE,IAAI,EAAE;EACR;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}