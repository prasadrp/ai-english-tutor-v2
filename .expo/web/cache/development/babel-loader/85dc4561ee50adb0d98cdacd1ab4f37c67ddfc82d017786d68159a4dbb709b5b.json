{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar Voice = NativeModules.Voice;\nvar voiceEmitter = Platform.OS !== 'web' ? new NativeEventEmitter(Voice) : null;\nvar RCTVoice = function () {\n  function RCTVoice() {\n    _classCallCheck(this, RCTVoice);\n    this._loaded = false;\n    this._listeners = null;\n    this._events = {\n      onSpeechStart: this._onSpeechStart.bind(this),\n      onSpeechRecognized: this._onSpeechRecognized.bind(this),\n      onSpeechEnd: this._onSpeechEnd.bind(this),\n      onSpeechError: this._onSpeechError.bind(this),\n      onSpeechResults: this._onSpeechResults.bind(this),\n      onSpeechPartialResults: this._onSpeechPartialResults.bind(this),\n      onSpeechVolumeChanged: this._onSpeechVolumeChanged.bind(this)\n    };\n  }\n  return _createClass(RCTVoice, [{\n    key: \"removeAllListeners\",\n    value: function removeAllListeners() {\n      Voice.onSpeechStart = null;\n      Voice.onSpeechRecognized = null;\n      Voice.onSpeechEnd = null;\n      Voice.onSpeechError = null;\n      Voice.onSpeechResults = null;\n      Voice.onSpeechPartialResults = null;\n      Voice.onSpeechVolumeChanged = null;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      var _this = this;\n      if (!this._loaded && !this._listeners) {\n        return Promise.resolve();\n      }\n      return new Promise(function (resolve, reject) {\n        Voice.destroySpeech(function (error) {\n          if (error) {\n            reject(new Error(error));\n          } else {\n            if (_this._listeners) {\n              _this._listeners.map(function (listener) {\n                return listener.remove();\n              });\n              _this._listeners = null;\n            }\n            resolve();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"start\",\n    value: function start(locale) {\n      var _this2 = this;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (!this._loaded && !this._listeners && voiceEmitter !== null) {\n        this._listeners = Object.keys(this._events).map(function (key) {\n          return voiceEmitter.addListener(key, _this2._events[key]);\n        });\n      }\n      return new Promise(function (resolve, reject) {\n        var callback = function callback(error) {\n          if (error) {\n            reject(new Error(error));\n          } else {\n            resolve();\n          }\n        };\n        if (Platform.OS === 'android') {\n          Voice.startSpeech(locale, Object.assign({\n            EXTRA_LANGUAGE_MODEL: 'LANGUAGE_MODEL_FREE_FORM',\n            EXTRA_MAX_RESULTS: 5,\n            EXTRA_PARTIAL_RESULTS: true,\n            REQUEST_PERMISSIONS_AUTO: true\n          }, options), callback);\n        } else {\n          Voice.startSpeech(locale, callback);\n        }\n      });\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (!this._loaded && !this._listeners) {\n        return Promise.resolve();\n      }\n      return new Promise(function (resolve, reject) {\n        Voice.stopSpeech(function (error) {\n          if (error) {\n            reject(new Error(error));\n          } else {\n            resolve();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      if (!this._loaded && !this._listeners) {\n        return Promise.resolve();\n      }\n      return new Promise(function (resolve, reject) {\n        Voice.cancelSpeech(function (error) {\n          if (error) {\n            reject(new Error(error));\n          } else {\n            resolve();\n          }\n        });\n      });\n    }\n  }, {\n    key: \"isAvailable\",\n    value: function isAvailable() {\n      return new Promise(function (resolve, reject) {\n        Voice.isSpeechAvailable(function (isAvailable, error) {\n          if (error) {\n            reject(new Error(error));\n          } else {\n            resolve(isAvailable);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"getSpeechRecognitionServices\",\n    value: function getSpeechRecognitionServices() {\n      if (Platform.OS !== 'android') {\n        throw new Exception('Speech recognition services can be queried for only on Android');\n      }\n      return Voice.getSpeechRecognitionServices();\n    }\n  }, {\n    key: \"isRecognizing\",\n    value: function isRecognizing() {\n      return new Promise(function (resolve) {\n        Voice.isRecognizing(function (isRecognizing) {\n          return resolve(isRecognizing);\n        });\n      });\n    }\n  }, {\n    key: \"_onSpeechStart\",\n    value: function _onSpeechStart(e) {\n      if (this.onSpeechStart) {\n        this.onSpeechStart(e);\n      }\n    }\n  }, {\n    key: \"_onSpeechRecognized\",\n    value: function _onSpeechRecognized(e) {\n      if (this.onSpeechRecognized) {\n        this.onSpeechRecognized(e);\n      }\n    }\n  }, {\n    key: \"_onSpeechEnd\",\n    value: function _onSpeechEnd(e) {\n      if (this.onSpeechEnd) {\n        this.onSpeechEnd(e);\n      }\n    }\n  }, {\n    key: \"_onSpeechError\",\n    value: function _onSpeechError(e) {\n      if (this.onSpeechError) {\n        this.onSpeechError(e);\n      }\n    }\n  }, {\n    key: \"_onSpeechResults\",\n    value: function _onSpeechResults(e) {\n      if (this.onSpeechResults) {\n        this.onSpeechResults(e);\n      }\n    }\n  }, {\n    key: \"_onSpeechPartialResults\",\n    value: function _onSpeechPartialResults(e) {\n      if (this.onSpeechPartialResults) {\n        this.onSpeechPartialResults(e);\n      }\n    }\n  }, {\n    key: \"_onSpeechVolumeChanged\",\n    value: function _onSpeechVolumeChanged(e) {\n      if (this.onSpeechVolumeChanged) {\n        this.onSpeechVolumeChanged(e);\n      }\n    }\n  }]);\n}();\nexport default new RCTVoice();","map":{"version":3,"names":["Voice","NativeModules","voiceEmitter","Platform","OS","NativeEventEmitter","RCTVoice","_classCallCheck","_loaded","_listeners","_events","onSpeechStart","_onSpeechStart","bind","onSpeechRecognized","_onSpeechRecognized","onSpeechEnd","_onSpeechEnd","onSpeechError","_onSpeechError","onSpeechResults","_onSpeechResults","onSpeechPartialResults","_onSpeechPartialResults","onSpeechVolumeChanged","_onSpeechVolumeChanged","_createClass","key","value","removeAllListeners","destroy","_this","Promise","resolve","reject","destroySpeech","error","Error","map","listener","remove","start","locale","_this2","options","arguments","length","undefined","Object","keys","addListener","callback","startSpeech","assign","EXTRA_LANGUAGE_MODEL","EXTRA_MAX_RESULTS","EXTRA_PARTIAL_RESULTS","REQUEST_PERMISSIONS_AUTO","stop","stopSpeech","cancel","cancelSpeech","isAvailable","isSpeechAvailable","getSpeechRecognitionServices","Exception","isRecognizing","e"],"sources":["/workspaces/ai-english-tutor-v2/node_modules/react-native-voice/src/index.js"],"sourcesContent":["import { NativeModules, NativeEventEmitter, Platform } from 'react-native';\n\nconst { Voice } = NativeModules;\n\n// NativeEventEmitter is only availabe on React Native platforms, so this conditional is used to avoid import conflicts in the browser/server\nconst voiceEmitter = Platform.OS !== 'web' ? new NativeEventEmitter(Voice) : null;\n\nclass RCTVoice {\n  constructor() {\n    this._loaded = false;\n    this._listeners = null;\n    this._events = {\n      onSpeechStart: this._onSpeechStart.bind(this),\n      onSpeechRecognized: this._onSpeechRecognized.bind(this),\n      onSpeechEnd: this._onSpeechEnd.bind(this),\n      onSpeechError: this._onSpeechError.bind(this),\n      onSpeechResults: this._onSpeechResults.bind(this),\n      onSpeechPartialResults: this._onSpeechPartialResults.bind(this),\n      onSpeechVolumeChanged: this._onSpeechVolumeChanged.bind(this),\n    };\n  }\n  removeAllListeners() {\n    Voice.onSpeechStart = null;\n    Voice.onSpeechRecognized = null;\n    Voice.onSpeechEnd = null;\n    Voice.onSpeechError = null;\n    Voice.onSpeechResults = null;\n    Voice.onSpeechPartialResults = null;\n    Voice.onSpeechVolumeChanged = null;\n  }\n  destroy() {\n    if (!this._loaded && !this._listeners) {\n      return Promise.resolve();\n    }\n    return new Promise((resolve, reject) => {\n      Voice.destroySpeech(error => {\n        if (error) {\n          reject(new Error(error));\n        } else {\n          if (this._listeners) {\n            this._listeners.map(listener => listener.remove());\n            this._listeners = null;\n          }\n          resolve();\n        }\n      });\n    });\n  }\n  start(locale, options = {}) {\n    if (!this._loaded && !this._listeners && voiceEmitter !== null) {\n      this._listeners = Object.keys(this._events).map(key =>\n        voiceEmitter.addListener(key, this._events[key]),\n      );\n    }\n\n    return new Promise((resolve, reject) => {\n      const callback = error => {\n        if (error) {\n          reject(new Error(error));\n        } else {\n          resolve();\n        }\n      };\n      if (Platform.OS === 'android') {\n        Voice.startSpeech(\n          locale,\n          Object.assign(\n            {\n              EXTRA_LANGUAGE_MODEL: 'LANGUAGE_MODEL_FREE_FORM',\n              EXTRA_MAX_RESULTS: 5,\n              EXTRA_PARTIAL_RESULTS: true,\n              REQUEST_PERMISSIONS_AUTO: true,\n            },\n            options,\n          ),\n          callback,\n        );\n      } else {\n        Voice.startSpeech(locale, callback);\n      }\n    });\n  }\n  stop() {\n    if (!this._loaded && !this._listeners) {\n      return Promise.resolve();\n    }\n    return new Promise((resolve, reject) => {\n      Voice.stopSpeech(error => {\n        if (error) {\n          reject(new Error(error));\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n  cancel() {\n    if (!this._loaded && !this._listeners) {\n      return Promise.resolve();\n    }\n    return new Promise((resolve, reject) => {\n      Voice.cancelSpeech(error => {\n        if (error) {\n          reject(new Error(error));\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n  isAvailable() {\n    return new Promise((resolve, reject) => {\n      Voice.isSpeechAvailable((isAvailable, error) => {\n        if (error) {\n          reject(new Error(error));\n        } else {\n          resolve(isAvailable);\n        }\n      });\n    });\n  }\n\n  /**\n   * (Android) Get a list of the speech recognition engines available on the device\n   * */\n  getSpeechRecognitionServices() {\n    if (Platform.OS !== 'android') {\n      throw new Exception('Speech recognition services can be queried for only on Android');\n    }\n\n    return Voice.getSpeechRecognitionServices();\n  }\n\n  isRecognizing() {\n    return new Promise(resolve => {\n      Voice.isRecognizing(isRecognizing => resolve(isRecognizing));\n    });\n  }\n  _onSpeechStart(e) {\n    if (this.onSpeechStart) {\n      this.onSpeechStart(e);\n    }\n  }\n  _onSpeechRecognized(e) {\n    if (this.onSpeechRecognized) {\n      this.onSpeechRecognized(e);\n    }\n  }\n  _onSpeechEnd(e) {\n    if (this.onSpeechEnd) {\n      this.onSpeechEnd(e);\n    }\n  }\n  _onSpeechError(e) {\n    if (this.onSpeechError) {\n      this.onSpeechError(e);\n    }\n  }\n  _onSpeechResults(e) {\n    if (this.onSpeechResults) {\n      this.onSpeechResults(e);\n    }\n  }\n  _onSpeechPartialResults(e) {\n    if (this.onSpeechPartialResults) {\n      this.onSpeechPartialResults(e);\n    }\n  }\n  _onSpeechVolumeChanged(e) {\n    if (this.onSpeechVolumeChanged) {\n      this.onSpeechVolumeChanged(e);\n    }\n  }\n}\n\nexport default new RCTVoice();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}