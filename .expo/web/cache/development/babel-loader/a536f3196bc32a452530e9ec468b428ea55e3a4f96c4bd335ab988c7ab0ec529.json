{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useCallback, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { Button, Text, Card, ActivityIndicator } from 'react-native-paper';\nimport * as Speech from 'expo-speech';\nimport { GeminiService } from \"../services/GeminiService\";\nimport { jsxs as _jsxs, jsx as _jsx } from \"react/jsx-runtime\";\nvar LessonScreen = function LessonScreen(_ref) {\n  var route = _ref.route,\n    navigation = _ref.navigation;\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isListening = _useState2[0],\n    setIsListening = _useState2[1];\n  var _useState3 = useState(''),\n    _useState4 = _slicedToArray(_useState3, 2),\n    userInput = _useState4[0],\n    setUserInput = _useState4[1];\n  var _useState5 = useState(''),\n    _useState6 = _slicedToArray(_useState5, 2),\n    aiResponse = _useState6[0],\n    setAiResponse = _useState6[1];\n  var _useState7 = useState(false),\n    _useState8 = _slicedToArray(_useState7, 2),\n    isLoading = _useState8[0],\n    setIsLoading = _useState8[1];\n  var _useState9 = useState(null),\n    _useState0 = _slicedToArray(_useState9, 2),\n    geminiService = _useState0[0],\n    setGeminiService = _useState0[1];\n  useEffect(function () {\n    var context = {\n      userLevel: 'intermediate',\n      focusArea: route.params.lessonType,\n      previousExchanges: []\n    };\n    setGeminiService(new GeminiService(context));\n  }, [route.params.lessonType]);\n  var startListening = useCallback(function () {\n    setIsListening(true);\n  }, []);\n  var stopListening = useCallback(function () {\n    setIsListening(false);\n  }, []);\n  var speakResponse = useCallback(function (text) {\n    Speech.speak(text, {\n      language: 'en',\n      pitch: 1,\n      rate: 0.9\n    });\n  }, []);\n  var handleAIResponse = useCallback(function () {\n    var _ref2 = _asyncToGenerator(function* (input) {\n      if (!geminiService) return;\n      setIsLoading(true);\n      try {\n        var response;\n        switch (route.params.lessonType) {\n          case 'pronunciation':\n            response = yield geminiService.getPronunciationFeedback(input);\n            break;\n          case 'grammar':\n            response = yield geminiService.getGrammarFeedback(input);\n            break;\n          default:\n            response = yield geminiService.sendMessage(input);\n        }\n        setAiResponse(response);\n        speakResponse(response);\n      } catch (error) {\n        console.error('Error getting AI response:', error);\n        setAiResponse('I apologize, but I encountered an error. Please try again.');\n      } finally {\n        setIsLoading(false);\n      }\n    });\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), [geminiService, route.params.lessonType, speakResponse]);\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(ScrollView, {\n      children: _jsx(Card, {\n        style: styles.card,\n        children: _jsxs(Card.Content, {\n          children: [_jsxs(Text, {\n            style: styles.lessonType,\n            children: [route.params.lessonType.charAt(0).toUpperCase() + route.params.lessonType.slice(1), \" Practice\"]\n          }), userInput && _jsx(View, {\n            style: styles.messageContainer,\n            children: _jsxs(Text, {\n              style: styles.userMessage,\n              children: [\"You: \", userInput]\n            })\n          }), aiResponse && _jsx(View, {\n            style: styles.messageContainer,\n            children: _jsxs(Text, {\n              style: styles.aiMessage,\n              children: [\"Tutor: \", aiResponse]\n            })\n          })]\n        })\n      })\n    }), _jsx(View, {\n      style: styles.controls,\n      children: isLoading ? _jsx(ActivityIndicator, {\n        animating: true,\n        size: \"large\"\n      }) : _jsx(Button, {\n        mode: \"contained\",\n        onPress: isListening ? stopListening : startListening,\n        style: styles.button,\n        children: isListening ? 'Stop Speaking' : 'Start Speaking'\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5'\n  },\n  card: {\n    margin: 16\n  },\n  lessonType: {\n    fontSize: 20,\n    marginBottom: 16,\n    textAlign: 'center'\n  },\n  messageContainer: {\n    marginVertical: 8\n  },\n  userMessage: {\n    backgroundColor: '#e3f2fd',\n    padding: 12,\n    borderRadius: 8,\n    marginLeft: 40\n  },\n  aiMessage: {\n    backgroundColor: '#f5f5f5',\n    padding: 12,\n    borderRadius: 8,\n    marginRight: 40\n  },\n  controls: {\n    padding: 16,\n    backgroundColor: 'white',\n    borderTopWidth: 1,\n    borderTopColor: '#e0e0e0'\n  },\n  button: {\n    marginVertical: 8\n  }\n});\nexport default LessonScreen;","map":{"version":3,"names":["React","useState","useCallback","useEffect","View","StyleSheet","ScrollView","Button","Text","Card","ActivityIndicator","Speech","GeminiService","jsxs","_jsxs","jsx","_jsx","LessonScreen","_ref","route","navigation","_useState","_useState2","_slicedToArray","isListening","setIsListening","_useState3","_useState4","userInput","setUserInput","_useState5","_useState6","aiResponse","setAiResponse","_useState7","_useState8","isLoading","setIsLoading","_useState9","_useState0","geminiService","setGeminiService","context","userLevel","focusArea","params","lessonType","previousExchanges","startListening","stopListening","speakResponse","text","speak","language","pitch","rate","handleAIResponse","_ref2","_asyncToGenerator","input","response","getPronunciationFeedback","getGrammarFeedback","sendMessage","error","console","_x","apply","arguments","style","styles","container","children","card","Content","charAt","toUpperCase","slice","messageContainer","userMessage","aiMessage","controls","animating","size","mode","onPress","button","create","flex","backgroundColor","margin","fontSize","marginBottom","textAlign","marginVertical","padding","borderRadius","marginLeft","marginRight","borderTopWidth","borderTopColor"],"sources":["/workspaces/ai-english-tutor-v2/src/screens/LessonScreen.tsx"],"sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\nimport { View, StyleSheet, ScrollView } from 'react-native';\nimport { Button, Text, Card, ActivityIndicator } from 'react-native-paper';\nimport * as Speech from 'expo-speech';\nimport type { NativeStackScreenProps } from '@react-navigation/native-stack';\nimport { GeminiService, ConversationContext } from '../services/GeminiService';\n\nimport { RootStackParamList } from '../types/navigation';\n\ntype Props = NativeStackScreenProps<RootStackParamList, 'Lesson'>;\n\nconst LessonScreen = ({ route, navigation }: Props): JSX.Element => {\n  const [isListening, setIsListening] = useState(false);\n  const [userInput, setUserInput] = useState('');\n  const [aiResponse, setAiResponse] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [geminiService, setGeminiService] = useState<GeminiService | null>(null);\n\n  useEffect(() => {\n    const context: ConversationContext = {\n      userLevel: 'intermediate', // This could come from user settings\n      focusArea: route.params.lessonType,\n      previousExchanges: [],\n    };\n    setGeminiService(new GeminiService(context));\n  }, [route.params.lessonType]);\n\n  const startListening = useCallback(() => {\n    setIsListening(true);\n    // Here you would implement speech recognition\n    // Using a service like Azure Speech Services or similar\n  }, []);\n\n  const stopListening = useCallback(() => {\n    setIsListening(false);\n    // Stop speech recognition and process the input\n  }, []);\n\n  const speakResponse = useCallback((text: string) => {\n    Speech.speak(text, {\n      language: 'en',\n      pitch: 1,\n      rate: 0.9,\n    });\n  }, []);\n\n  const handleAIResponse = useCallback(async (input: string) => {\n    if (!geminiService) return;\n    \n    setIsLoading(true);\n    try {\n      let response: string;\n      \n      switch (route.params.lessonType) {\n        case 'pronunciation':\n          response = await geminiService.getPronunciationFeedback(input);\n          break;\n        case 'grammar':\n          response = await geminiService.getGrammarFeedback(input);\n          break;\n        default:\n          response = await geminiService.sendMessage(input);\n      }\n      \n      setAiResponse(response);\n      speakResponse(response);\n    } catch (error) {\n      console.error('Error getting AI response:', error);\n      setAiResponse('I apologize, but I encountered an error. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, [geminiService, route.params.lessonType, speakResponse]);\n\n  return (\n    <View style={styles.container}>\n      <ScrollView>\n        <Card style={styles.card}>\n          <Card.Content>\n            <Text style={styles.lessonType}>\n              {route.params.lessonType.charAt(0).toUpperCase() + route.params.lessonType.slice(1)} Practice\n            </Text>\n            \n            {userInput && (\n              <View style={styles.messageContainer}>\n                <Text style={styles.userMessage}>You: {userInput}</Text>\n              </View>\n            )}\n            \n            {aiResponse && (\n              <View style={styles.messageContainer}>\n                <Text style={styles.aiMessage}>Tutor: {aiResponse}</Text>\n              </View>\n            )}\n          </Card.Content>\n        </Card>\n      </ScrollView>\n\n      <View style={styles.controls}>\n        {isLoading ? (\n          <ActivityIndicator animating={true} size=\"large\" />\n        ) : (\n          <Button\n            mode=\"contained\"\n            onPress={isListening ? stopListening : startListening}\n            style={styles.button}\n          >\n            {isListening ? 'Stop Speaking' : 'Start Speaking'}\n          </Button>\n        )}\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n  },\n  card: {\n    margin: 16,\n  },\n  lessonType: {\n    fontSize: 20,\n    marginBottom: 16,\n    textAlign: 'center',\n  },\n  messageContainer: {\n    marginVertical: 8,\n  },\n  userMessage: {\n    backgroundColor: '#e3f2fd',\n    padding: 12,\n    borderRadius: 8,\n    marginLeft: 40,\n  },\n  aiMessage: {\n    backgroundColor: '#f5f5f5',\n    padding: 12,\n    borderRadius: 8,\n    marginRight: 40,\n  },\n  controls: {\n    padding: 16,\n    backgroundColor: 'white',\n    borderTopWidth: 1,\n    borderTopColor: '#e0e0e0',\n  },\n  button: {\n    marginVertical: 8,\n  },\n});\n\nexport default LessonScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}