{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { GoogleGenerativeAI } from '@google/generative-ai';\nimport { config } from 'dotenv';\nconfig();\nvar genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY || '');\nvar model = genAI.getGenerativeModel({\n  model: 'gemini-pro'\n});\nexport var GeminiService = function () {\n  function GeminiService(context) {\n    _classCallCheck(this, GeminiService);\n    this.chat = model.startChat({\n      history: [{\n        role: 'user',\n        parts: [{\n          text: `You are an English language tutor. The student's level is ${context.userLevel}. \n            They want to focus on ${context.focusArea}. Please adjust your responses accordingly.`\n        }]\n      }, {\n        role: 'model',\n        parts: [{\n          text: \"I'll help you improve your English, focusing on your specific needs and level.\"\n        }]\n      }]\n    });\n    this.context = context;\n  }\n  return _createClass(GeminiService, [{\n    key: \"sendMessage\",\n    value: function () {\n      var _sendMessage = _asyncToGenerator(function* (message) {\n        try {\n          var result = yield this.chat.sendMessage(message);\n          var response = yield result.response;\n          return response.text();\n        } catch (error) {\n          console.error('Error communicating with Gemini:', error);\n          return 'I apologize, but I encountered an error. Please try again.';\n        }\n      });\n      function sendMessage(_x) {\n        return _sendMessage.apply(this, arguments);\n      }\n      return sendMessage;\n    }()\n  }, {\n    key: \"getPronunciationFeedback\",\n    value: function () {\n      var _getPronunciationFeedback = _asyncToGenerator(function* (audioTranscript) {\n        try {\n          var prompt = `As an English tutor, analyze this speech: \"${audioTranscript}\"\n      Provide specific feedback on:\n      1. Pronunciation accuracy\n      2. Common mistakes\n      3. Improvement suggestions\n      Keep the response concise and encouraging.`;\n          var result = yield this.chat.sendMessage(prompt);\n          var response = yield result.response;\n          return response.text();\n        } catch (error) {\n          console.error('Error getting pronunciation feedback:', error);\n          return 'I apologize, but I encountered an error analyzing your pronunciation.';\n        }\n      });\n      function getPronunciationFeedback(_x2) {\n        return _getPronunciationFeedback.apply(this, arguments);\n      }\n      return getPronunciationFeedback;\n    }()\n  }, {\n    key: \"getGrammarFeedback\",\n    value: function () {\n      var _getGrammarFeedback = _asyncToGenerator(function* (text) {\n        try {\n          var prompt = `As an English tutor, analyze this text: \"${text}\"\n      Provide feedback on:\n      1. Grammar accuracy\n      2. Sentence structure\n      3. Suggested improvements\n      Keep the response concise and encouraging.`;\n          var result = yield this.chat.sendMessage(prompt);\n          var response = yield result.response;\n          return response.text();\n        } catch (error) {\n          console.error('Error getting grammar feedback:', error);\n          return 'I apologize, but I encountered an error analyzing your grammar.';\n        }\n      });\n      function getGrammarFeedback(_x3) {\n        return _getGrammarFeedback.apply(this, arguments);\n      }\n      return getGrammarFeedback;\n    }()\n  }]);\n}();","map":{"version":3,"names":["GoogleGenerativeAI","config","genAI","process","env","GOOGLE_API_KEY","model","getGenerativeModel","GeminiService","context","_classCallCheck","chat","startChat","history","role","parts","text","userLevel","focusArea","_createClass","key","value","_sendMessage","_asyncToGenerator","message","result","sendMessage","response","error","console","_x","apply","arguments","_getPronunciationFeedback","audioTranscript","prompt","getPronunciationFeedback","_x2","_getGrammarFeedback","getGrammarFeedback","_x3"],"sources":["/workspaces/ai-english-tutor-v2/src/services/GeminiService.ts"],"sourcesContent":["import { GoogleGenerativeAI } from '@google/generative-ai';\nimport { config } from 'dotenv';\n\n// Load environment variables\nconfig();\n\nconst genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY || '');\n\n// Create a conversation model\nconst model = genAI.getGenerativeModel({ model: 'gemini-pro' });\n\nexport interface ConversationContext {\n  userLevel: string;\n  focusArea: string;\n  previousExchanges: string[];\n}\n\nexport class GeminiService {\n  private chat;\n  private context: ConversationContext;\n\n  constructor(context: ConversationContext) {\n    this.chat = model.startChat({\n      history: [\n        {\n          role: 'user',\n          parts: [{\n            text: `You are an English language tutor. The student's level is ${context.userLevel}. \n            They want to focus on ${context.focusArea}. Please adjust your responses accordingly.`\n          }],\n        },\n        {\n          role: 'model',\n          parts: [{\n            text: \"I'll help you improve your English, focusing on your specific needs and level.\"\n          }],\n        },\n      ],\n    });\n    this.context = context;\n  }\n\n  async sendMessage(message: string): Promise<string> {\n    try {\n      const result = await this.chat.sendMessage(message);\n      const response = await result.response;\n      return response.text();\n    } catch (error) {\n      console.error('Error communicating with Gemini:', error);\n      return 'I apologize, but I encountered an error. Please try again.';\n    }\n  }\n\n  async getPronunciationFeedback(audioTranscript: string): Promise<string> {\n    try {\n      const prompt = `As an English tutor, analyze this speech: \"${audioTranscript}\"\n      Provide specific feedback on:\n      1. Pronunciation accuracy\n      2. Common mistakes\n      3. Improvement suggestions\n      Keep the response concise and encouraging.`;\n\n      const result = await this.chat.sendMessage(prompt);\n      const response = await result.response;\n      return response.text();\n    } catch (error) {\n      console.error('Error getting pronunciation feedback:', error);\n      return 'I apologize, but I encountered an error analyzing your pronunciation.';\n    }\n  }\n\n  async getGrammarFeedback(text: string): Promise<string> {\n    try {\n      const prompt = `As an English tutor, analyze this text: \"${text}\"\n      Provide feedback on:\n      1. Grammar accuracy\n      2. Sentence structure\n      3. Suggested improvements\n      Keep the response concise and encouraging.`;\n\n      const result = await this.chat.sendMessage(prompt);\n      const response = await result.response;\n      return response.text();\n    } catch (error) {\n      console.error('Error getting grammar feedback:', error);\n      return 'I apologize, but I encountered an error analyzing your grammar.';\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}